[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm>=7",
]
build-backend = "setuptools.build_meta"

[project]
name = "mmft.ooc-designer"
description = "A tool for Design Automation for Organs-on-Chips"
readme = "README.md"
authors = [
    { name = "Maria Emmerich", email = "maria.emmerich@tum.de" },
    { name = "Philipp Ebner", email = "philipp. ebner@jku.at" }
]
keywords = ["MMFT", "microfluidics", "design-automation", "Organ-on-Chip", "OoC", "MPS"]
license = { file = "LICENSE.md" }

requires-python = ">=3.8"
dependencies = [
    "numpy==1.25.1",
    "numpy-stl==3.1.1",
    "matplotlib==3.7.2"
]
version = "0.1"

[project.urls]
Homepage = "https://github.com/cda-tum/munich-microfluidics-toolkit"

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = []
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/meta",
    "**/plots",
    "**/test",
    "**/tests"
]

[tool.check-sdist]
sdist-only = []
git-only = [
    "docs/*",
    "extern/*",
    "test/*",
    ".idea/*",
]


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["test/python"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
]


[tool.mypy]
files = ["src/mmft", "test/python"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.8"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["matplotlib.*", "numpy.*", "stl.*", "collections.*", "math.*", "json.*"]
ignore_missing_imports = true


[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
src = ["src"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "FURB",        # refurb
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "LOG",         # flake8-logging-format
    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TCH",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
extend-ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "PT004",   # Incorrect, just usefixtures instead.
    "S101",    # Use of assert detected
    "S403",    # `pickle`, `cPickle`, `dill`, and `shelve` modules are possibly insecure
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"test/python/**" = ["T20", "ANN"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"

